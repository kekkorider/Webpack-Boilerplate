{"version":3,"sources":["webpack:///./src/scss/_settings.scss","webpack:///./src/scss/_global.scss","webpack:///./src/scss/_typography.scss","webpack:///./src/scss/mixins/_breakpoint.scss","webpack:///./src/scss/_site.scss","webpack:///./src/scss/mixins/_grid.scss"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;GAEG;AASF;;GAEE;AAaF;;GAEE;AAgBF;;IAEG;AAqBF;;IAEE;AC9EJ;EACI,+BACJ;UADI,uBACJ,EAAC;;AAED;EACI,4DDqD8D;ECpD9D,iBAAgB;EAChB,UACJ,EAAC;;ACLG;EACI,4DFsD0D;EErD1D,gBFyDW;EExDX,UAAS;EACT,iBAAgB;EAChB,eAAc;EACd,oBAAmB;ECCvB;;;OAGG;EAHH;;;OAGG,EDKF;ECgBW;ID/BZ;MASQ,gBFsDO,EEhDd;ECgBW;ID/BZ;MAaQ,gBFsDO,EEpDd;;AAfD;EACI,4DFsD0D;EErD1D,gBF0DW;EEzDX,UAAS;EACT,iBAAgB;EAChB,eAAc;EACd,oBAAmB;ECCvB;;;OAGG;EAHH;;;OAGG,EDKF;ECgBW;ID/BZ;MASQ,gBFuDO,EEjDd;ECgBW;ID/BZ;MAaQ,gBFuDO,EErDd;;AAfD;EACI,4DFsD0D;EEpD1D,UAAS;EACT,iBAAgB;EAChB,eAAc;EACd,oBAAmB;ECCvB;;;OAGG;EAHH;;;OAGG,EDKF;;AAfD;EACI,4DFsD0D;EEpD1D,UAAS;EACT,iBAAgB;EAChB,eAAc;EACd,oBAAmB;ECCvB;;;OAGG;EAHH;;;OAGG,EDKF;;AAfD;EACI,4DFsD0D;EEpD1D,UAAS;EACT,iBAAgB;EAChB,eAAc;EACd,oBAAmB;ECCvB;;;OAGG;EAHH;;;OAGG,EDKF;;AAfD;EACI,4DFsD0D;EEpD1D,UAAS;EACT,iBAAgB;EAChB,eAAc;EACd,oBAAmB;ECCvB;;;OAGG;EAHH;;;OAGG,EDKF;;AEhBD;ECDA,YAAW;EACX,kBLUkB;EKTlB,kBAAiB;EACjB,mBAAkB,EDAjB;ECIG;IAEI,eAAc;IACd,YAAW;IACX,mBAAkB;IAClB,UAAS;IACT,YAAW,EACd;;ADTL;ECsBA,YAA8B;EAC9B,YAAW;EAUP,mBAAiD;EACjD,oBAAkD;EF9BtD;;;OAGG;EAHH;;;OAGG;EAHH;;;OAGG;EAHH;;;OAGG,ECJF;EDyBW;IC5BZ;MCsCY,mBAAgD;MAChD,oBAAiD,EDpC5D;EDyBW;IC5BZ;MCsCY,mBAAgD;MAChD,oBAAiD,EDpC5D;EDyBW;IC5BZ;MCsCY,mBAAgD;MAChD,oBAAiD,EDpC5D;EDyBW;IC5BZ;MCsCY,mBAAgD;MAChD,oBAAiD,EDpC5D","file":"app.bundle.css","sourcesContent":["/*\n * 1 - Global stuff\n * 2 - Colors\n * 3 - Grid\n * 4 - Typography\n * 5 - Timings\n */\n\n\n/*\n * 1 - Global stuff\n */\n $global-width: 1000px;\n $global-font-size: 17px;\n $global-font-weight: 300;\n $global-line-height: 1.3;\n $global-columns: 12;\n $z-index-on-top: 9999;\n  \n  \n /*\n * 2 - Colors\n */\n $primary-color: #3872fc;\n $secondary-color: #57b5e6;\n $accent: #ffb676;\n $black: #333;\n $dark-gray: #666;\n $medium-gray: #CCC;\n $light-gray: #f2f2f2;\n $white: #ffffff;\n $success: #bada55;\n $error: #d00;\n  \n  \n /*\n * 3 - Grid\n */\n $breakpoints: (\n     medium: 640px, \n     medium-hi: 840px, \n     large: 1024px, \n     xlarge: 1320px\n );\n  \n $column-gutters: (\n     small: 40px,\n     medium: 40px, \n     medium-hi: 40px, \n     large: 40px, \n     xlarge: 40px\n );\n \n /*\n  * 4 - Typography\n  */\n $body-font-size: $global-font-size;\n $body-font-color: rgba($white, 0.4);\n $body-font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n $header-font-family: $body-font-family;\n $header-font-size: (\n     'small': (\n         'h1': 60px, \n         'h2': 24px\n     ), \n     'medium': (\n         'h1': 60px, \n         'h2': 42px\n     ), \n     'large': (\n         'h1': 82px, \n         'h2': 60px\n     )\n     \n );\n\n  /*\n  * 5 - Timings\n  */\n$timing-short: 0.25s;\n$timing-medium: 0.5s;\n$timing-long: 1s;\n\n\n// WEBPACK FOOTER //\n// ./src/scss/_settings.scss","* {\n    box-sizing: border-box\n}\n\nbody {\n    font-family: $body-font-family;\n    line-height: 1.4;\n    margin: 0\n}\n\n\n// WEBPACK FOOTER //\n// ./src/scss/_global.scss","// Headings font sizes\n@for $i from 1 through 6 {\n\n    h#{$i}, .h#{$i} {\n        font-family: $header-font-family;\n        font-size: map-deep-get($header-font-size, 'small', h#{$i});\n        margin: 0;\n        font-weight: 400;\n        line-height: 1;\n        letter-spacing: 2px;\n\n        @include breakpoint(medium) {\n            font-size: map-deep-get($header-font-size, 'medium', h#{$i})\n        }\n\n        @include breakpoint(large) {\n            font-size: map-deep-get($header-font-size, 'large', h#{$i})\n        }\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/scss/_typography.scss","@mixin breakpoint($bp, $dir: 'up') {\n\n    $cond: '';\n    \n    @if $dir == 'up' {\n        $cond: 'min-width';\n    } @else {\n        $cond: 'max-width';\n    }\n\n    /*\n     * Checking if $bp equals one of the predefined breakpoints in _settings.scss or \n     * if it's a user defined breakpoint\n     */\n    @if type-of($bp) == 'number' {\n\n        @if $dir == 'down' {\n            $bp: $bp - 1px\n        }\n\n        @media screen and (#{$cond}: #{$bp}) {\n            @content;\n        }\n\n    } @else {\n\n        @each $key, $value in $breakpoints {\n\n            @if $bp == $key {\n\n                @if $dir == 'down' {\n                    $value: $value - 1px\n                }\n    \n                @media screen and (#{$cond}: #{$value}) {\n                    @content;\n                }\n    \n            }\n\n        }\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/scss/mixins/_breakpoint.scss",".page-section {\n\n    &__inner {\n        @include row\n    }\n\n    &__header, \n    &__content {\n        @include columns(1, 1)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/scss/_site.scss","@mixin row($width: $global-width, $cf: true) {\n    width: 100%;\n    max-width: $width;\n    margin-left: auto;\n    margin-right: auto;\n\n    @if ( $cf == true ) {\n        \n        &:before, \n        &:after {\n            display: block;\n            content: \"\";\n            visibility: hidden;\n            height: 0;\n            clear: both;\n        }\n\n    }\n}\n\n\n@mixin columns($columns: $global-columns, $of: null, $gutter: null) {\n\n    // Setting default $of value\n    @if ( $of == null ) {\n        $of: $global-columns;\n    }\n\n    width: ($columns / $of) * 100%;\n    float: left;\n\n    // Gutters\n    @if ( $gutter != null ) {\n\n        padding-left: $gutter / 2;\n        padding-right: $gutter / 2;\n\n    } @else {\n\n        padding-left: map-get($column-gutters, small) / 2;\n        padding-right: map-get($column-gutters, small) / 2;\n\n        @each $key, $value in $breakpoints {\n            @include breakpoint($key) {\n                padding-left: map-get($column-gutters, $key) / 2;\n                padding-right: map-get($column-gutters, $key) / 2;\n            }\n        }\n        \n    }\n}\n\n@mixin push-pull($columns: null, $of: $global-columns) {\n\n    @if ( $columns == null ) {\n        @error \"$columns parameter is required\";\n    }\n\n    margin-left: ($columns / $of) * 100%;\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/scss/mixins/_grid.scss"],"sourceRoot":""}